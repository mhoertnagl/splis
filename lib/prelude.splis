/**
 * Atomic values of truth. The mnemonics true and false are nothing but the
 * numeric values 1 and 0 respectively.
 */
(def {true} 1)
(def {false} 0)

/**
 * The empty list.
 */
(def {nil} {})

/**
 * Defines a new global function. The head of argument f will be the function
 * name while the remaining elements of f will be the argument names. 
 *    The argument b is the body implementation of f.
 *
 * @param f  Q-List with the function name as its first argument followed by an 
 *           arbitrary number of function argument names.
 * @param b  Q-Expression of the body implementing the function f. 
 */
(def {fun} (lambda {f b} {
  def (head f) (lambda (tail f) b)}))

/**
 * Defines a new local environment. Variable bindings inside this scope Will not
 * be accessible outhside the let expression.
 *
 * @param b  @-Expression of the body to be evaluated inside the new local
 *           environment.
 */
(fun {let b} {lambda {} b})

/**
 * Loads and executes a splis module.
 *
 * @param m  String path to module file.
 */
(fun {import m} {execute (load m)})

/**
 * Returns true iff the list l is empty.
 *
 * @param l  A Q-List.
 * @returns  True if and only if the list is empty.
 */
(fun {nil? l} {== l nil})

/**
 * Returns the first element of a list and evaluates it.
 *
 * @param l  A Q-List.
 * @returns  The first element evaluated.
 */
(fun {fst l} {eval (head l)})

/**
 * Returns the length of the list l. Requires time proportional to O(n). 
 *
 * @param l  A Q-List.
 * @returns  The number of elements in list l.
 */
(fun {len l} {
  if (nil? l)
    {0}
    {+ 1 (len (tail l))}})

/**
 * Reverses the list l.
 *
 * @param l  A Q-List.
 * @returns  New list containing the elements of list l in reversed order.
 */
(fun {rev l} {
  if (nil? l)
    {nil}
    {join (rev (tail l)) (head l)}})
    
/**
 * Applies a unary function f to every element in list l and returns a new list 
 * of the evaluation results in the same order as the arguments in l.
 *
 * @param f  Unary function.
 * @param l  Q-List of elements applicable to f.
 * @returns  New list containing the evaluation results of each element.
 */     
(fun {map f l} {
  if (nil? l)
    {nil}
    {join (list (f (fst l))) (map f (tail l))}})
